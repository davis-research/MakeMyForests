% Generated by roxygen2 (4.1.1.9000): do not edit by hand
% Please edit documentation in R/doFxBySort.R
\name{doFxBySort}
\alias{doFxBySort}
\title{Call a MakeMyForests Function On Subsetted Data}
\usage{
doFxBySort(fn, searchCols, doCols, fulldf, extraParams = NULL,
  includeSort = FALSE)
}
\arguments{
\item{fn}{The name of the function to call. Can be a function outside of
MakeMyForests, e.g., "mean".}

\item{searchCols}{A single string or vector of strings containing the names
of the columns to sort by.}

\item{doCols}{A single string or vector of strings containing the names of
the columns to use for function evaluation.}

\item{fulldf}{The dataframe to use for searching and doing. Must contain the
column names contained within both searchCols and doCols.}

\item{extraParams}{Any extra parameters, if needed, to correctly run the
function being called.}

\item{includeSort}{Set this value to TRUE if you want to see the sort columns
  alongside the response variables.}
}
\value{
This function returns either a vector of responses or a dataframe
  with sort values.
}
\description{
This is a general function to call a function (fn) on a dataframe (doCols)
for each of a set of unique search criteria (searchCols). You must also
include the full dataframe (a dataframe with all searchCols and doCols), and,
if necessary, any extra parameters needed by the function to run.
}
\examples{
myDf <- data.frame(type=c(rep("vegetable", 10), rep("fruit", 10)),
species=c(rep("broccoli",5), rep("beans", 5), rep("apples", 5),
rep("oranges", 5)), weights=as.numeric(runif(20, 0, 2)))
doFxBySort("mean", c("type", "species"), "weights", myDf)

doFxBySort("mean", c("type", "species"), "weights", myDf, includeSort=TRUE)

myDfNA <- rbind(myDf, c("vegetable", "broccoli", NA))
## the above line converts the weights row to a character type, convert it back
myDfNA$weights <- as.numeric(myDfNA$weights)
## do fx again
doFxBySort("mean", c("type", "species"), "weights", myDfNA, extraParam=list(na.rm=TRUE))

doFxBySort("mean", c("type", "species"), "weights", myDfNA, extraParam=list(na.rm=TRUE), includeSort=TRUE)
}

